apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'application'

mainClassName = 'br.com.cardboard.Main.Main'

description = 'CardBoard'
group = 'br.com.cardboard'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

def myManifest = manifest {
    attributes 'Implementation-Title': 'Servidor de exemplo',
            'Implementation-Version': version,
            'Main-Class': mainClassName
}

repositories {
    mavenCentral()
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }

    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'
    javadoc.options.encoding = 'UTF-8'
}

dependencies {
    implementation 'commons-io:commons-io:2.6'
    testImplementation('org.junit.jupiter:junit-jupiter:5.5.2')
    testImplementation('org.hamcrest:hamcrest-core:1.3')
    testImplementation('org.hamcrest:hamcrest-library:1.3')
    testImplementation('org.mockito:mockito-core:1.9.+')
	compile group: 'org.postgresql', name: 'postgresql', version: '42.2.9'
	compile group: 'org.json', name: 'json', version: '20190722'
}

task execute(type: JavaExec) {
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
}

jar {
    manifest {
        manifest = myManifest
        manifest.attributes "Class-Path": configurations.compile.collect {
            'libs/' + it.getName()
        }.join(' ')
    }
}

task fatJar(type: Jar, group: "build") {
    zip64 = true
    manifest = myManifest
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task makeDistFatJar(type: Zip, dependsOn: [clean, fatJar], group: "dist") {
    from "$buildDir/libs"
}

task makeDist(type: Zip, dependsOn: [clean, jar], group: "dist") {
    from jar.archivePath
    into('libs') {
        from configurations.runtime
    }
}

test {
    useJUnitPlatform()
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
}